### JavaScript Section

# Arrow function
snippet =>
(${1:arguments...}) => {
  ${2:${VISUAL:function block}}
}${3}
endsnippet

# Ternary operation
snippet ?
const ${1:variable name} = ${2:check} ? ${3:case true} : ${4:case false}
endsnippet

# Const declaration
snippet =
const ${1:variable name} = ${2:expression}
endsnippet

# Import
snippet import
import ${1:name} from '${2:module}'
endsnippet

# Console log
snippet log
console.log('${1:message}')
endsnippet

# Console log variable
snippet logvar
console.log('$1', ${1:expression})
endsnippet

# if
snippet if
if (${1:expression}) {
  ${2:if block...}
}
endsnippet

# if and else
snippet ifelse
if (${1:expression}) {
  ${2:if block...}
} else {
  ${3:else block...}
}
endsnippet

# setTimeout
snippet timeout
setTimeout(() => {
  ${1:function block...}
}, ${2:delay})
endsnippet

# forEach
snippet each
${1:${VISUAL:collection}}.forEach((${2:arguments...}) => {
  ${3:function block...}
})
endsnippet

# map
snippet map
${1:${VISUAL:collection}}.map((${2:arguments...}) => {
  ${3:function block...}
  return ${4:value}
})
endsnippet

### React Section

# React componentWillMount
snippet mount
componentWillMount () {
  ${1:function block...}
}
endsnippet

# React componentDidMount
snippet didmount
componentDidMount () {
  ${1:function block...}
}
endsnippet

# React componentWillUnmount
snippet unmount
componentWillUnmount () {
  ${1:function block...}
}
endsnippet

# React componentWillReceiveProps
snippet receive
componentWillReceiveProps (${1:arguments...}) {
  ${2:function block...}
}
endsnippet

# React shouldComponentUpdate
snippet should
shouldComponentUpdate (${1:arguments...}) {
  ${2:function block...}
}
endsnippet

# React render
snippet render
render () {
  return (
  )
}
endsnippet

# React setState
snippet set
this.setState({${1:new state...}})
endsnippet

# React class template
snippet react
import React, {Component} from 'react'

class ${1:component name} extends Component {
  render () {
    return (
    )
  }
}

export default $1
endsnippet
